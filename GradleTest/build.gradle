buildscript {

    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.4.2'
    }
}

/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4/userguide/java_library_plugin.html
 */ 

// Apply the java-library plugin to add support for Java Library
group 'com.bxw.gradleTest'
version '1.0-SNAPSHOT'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war' //web项目

war {
	archiveName 'Test.war' //指定打包名称
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java' // 指定源码目录
        }
        resources {
            srcDir 'src/main/resources' //资源目录
        }
    }
}

webAppDirName = 'WebContent' //web项目的根目录

apply plugin: 'com.bmuschko.tomcat'//tomcat插件    buildscript dependency

tomcat {
    //httpPort = 8080
    httpsPort = 8090
    enableSSL = true
    contextPath = 'gradleTest'
}

tomcatRun.outputFile = file('tomcatRunLog.txt')
tomcatRunWar.outputFile = file('tomcatRunWarLog.txt')
/*
apply plugin: 'maven-publish'//发布
publishing {
    publications {
        maven(MavenPublication) {
            groupId "com.cdc"
            artifactId "GradleTest"
            version "1.0"

            from components.java
        }
    }
    repositories {
        maven {
            url "http://127.0.0.1:8000/repository/cdc/"
            credentials {
                  username 'admin'
                  password 'admin123'
              }
        }
    }
}
*/

configurations.all{
	resolutionStrategy{
		failOnVersionConflict()	//手动处理依赖的版本冲突
		//force 'org.springframework:spring-core:2.0.8'	强制指定依赖的版本
	}
}

sourceCompatibility=1.8	//编码环境	

targetCompatibility = 1.8 //编译环境

tasks.withType(JavaCompile) {
    options.encoding = "gbk" //设置编码
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
     mavenLocal()
    maven { url "http://10.244.159.94:8082/nexus/content/groups/public/" }
    mavenCentral()
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    compile group: 'org.springframework', name: 'spring-webmvc', version: '5.0.2.RELEASE'
    
   providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    
   // compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    
    compile group: 'org.springframework', name: 'spring-tx', version: '5.0.2.RELEASE'
    
    
    //compile ('com.android.support:design:22.2.1'){exclude group: 'com.android.support'} exclude解决依赖冲突

	//compile fileTree(dir:'lib',include:['*.jar'])	//引用该项目lib文件夹下的所有依赖

    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${TOMCAT_VERSION}",
           "org.apache.tomcat.embed:tomcat-embed-logging-juli:${TOMCAT_VERSION}",
           "org.apache.tomcat.embed:tomcat-embed-jasper:${TOMCAT_VERSION}"
           
}

def createDir = {
	path ->
		File dir = file(path)
		//println path
		//println dir.exists()
		if(!dir.exists()){
			dir.mkdirs()
		}
}
task makeJavaDir(){//调用闭包创建项目目录
	def paths = ['src/main/java', 'src/main/resources', 'src/test/java', 'src/test/resources']
	doFirst{
		paths.forEach(createDir)
	}
}

task makeWebDir(){
	dependsOn 'makeJavaDir'
	def paths = ['WebRoot/WEB-INF/lib', 'WebRoot/WEB-INF/views', 'WebRoot/public']
	doLast{
		paths.forEach(createDir)
	}
}
//debug
task tomcatDebug {
   // Create a new task tomcatDebug, add a description and add it to the same group as tomcatRun
   description "Starting Tomcat with debugger enabled on port 5008."
   group "web application"
} << {

   org.gradle.tooling.ProjectConnection conn = org.gradle.tooling.GradleConnector.newConnector()
      .forProjectDirectory(new File("."))
      .connect();

   try {

      org.gradle.tooling.model.build.BuildEnvironment env = conn.getModel(org.gradle.tooling.model.build.BuildEnvironment.class)
      org.gradle.tooling.BuildLauncher build = conn.newBuild();

      build.forTasks("tomcatRun")
      // Enable debug via jvm arguments and append JVM arguments of the currently running vm (except -D).
      build.setJvmArguments("-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5008", *env.java.jvmArguments)

      // Run tomcatRun in the new JVM with debug parameters
      build.run()

   } finally {
      conn.close();
   }
}

/*
远程发布项目
配置ssh插件、提供远程服务器登陆，文件传输，命令执行等支持
apply plugin: 'org.hidetake.ssh'  
  
buildscript{  
    repositories {  
        jcenter()  
        mavenCentral()  
    }  
      
     dependencies {  
        classpath 'org.hidetake:gradle-ssh-plugin:2.6.0'  
      }  
      
}  

配置远程服务器信息
ssh.settings {  
  knownHosts = allowAnyHosts  
}  
  
remotes {  
  deployServer {  
    host = 'xxx.xxx.xxx.xxx'  
    user = 'xxx'  
    password = 'xxx'  
  }  
}  

配置gradle task、共四个任务：关闭tomcat、删除war包及目录、拷贝文件、启动tomcat，且后者依赖前者
task shutdownTomcat() << {
  ssh.run {
    session(remotes.deployServer) {
      println 'shut down tomcat...' 
      executeScript '''#!/bin/sh
                        cd /opt/app/apache-tomcat-7.0.67/bin
                        ./shutdown.sh
                    '''
    }
  }
}

task del(dependsOn:shutdownTomcat) << {
  ssh.run {
    session(remotes.deployServer) {
      println 'start deleting...' 
      executeScript '''#!/bin/sh
                        rm -rf /opt/app/apache-tomcat-7.0.67/webapps/cloud_server
                        rm -f /opt/app/apache-tomcat-7.0.67/webapps/cloud_server.war
                    '''
    }
  }
}

task copy(dependsOn:del) << {
  ssh.run {
    session(remotes.deployServer) {
      println 'start copying war...' 
      put from: buildDir.toString() + '/libs/cloud_server.war', into: '/opt/app/apache-tomcat-7.0.67/webapps'
    }
  }
}

task deploy(dependsOn:copy) << {
  ssh.run {
    session(remotes.deployServer) {
      println 'start tomcat...' 
      execute '/opt/app/apache-tomcat-7.0.67/bin/startup.sh'
    }
  }
*/

