plugins {
   id "name.remal.check-dependency-updates" version "1.0.6" //第三方插件自动检查依赖更新
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war' //web项目
apply plugin: 'pmd'//代码审查
apply from: 'gretty.plugin'

pmd {//静态代码审查
    consoleOutput = true
    reportsDir = file("build/reports/pmd")

    ruleSets = [
        "java-ali-comment"
    ]
}

repositories {
    mavenLocal()
    	maven { url "http://10.252.110.137:8081/nexus/content/groups/public/" }
    	mavenCentral()
    	jcenter()
}

war {
	archiveName 'Test.war' //指定打包名称
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java' // 指定源码目录
        }
        resources {
            srcDir 'src/main/resources' //资源目录
        }
    }
}

//webAppDirName = 'WebContent' //web项目的根目录

gretty {
  servletContainer = 'tomcat8'
  httpPort = 8080
  contextPath = '/CPMgmtWeb'
  extraResourceBase 'WebContent'
  afterEvaluate {
    appRunDebug {
      debugPort = 5005
      debugSuspend = true
    }
  }
}

configurations.all{
	resolutionStrategy{
		failOnVersionConflict()	//手动处理依赖的版本冲突
		force 'org.slf4j:slf4j-api:1.7.25'
		force 'commons-logging:commons-logging:1.2'
	}
}

sourceCompatibility=1.8	//编码环境	

targetCompatibility = 1.8 //编译环境

tasks.withType(JavaCompile) {
    options.encoding = "gbk" //设置编码
}

dependencies {
    testImplementation 'junit:junit:4.12'
    
    compile group: 'org.springframework', name: 'spring-webmvc', version: '5.0.2.RELEASE'
    
   providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    
    compile group: 'org.springframework', name: 'spring-tx', version: '5.0.2.RELEASE'
    
     pmd "com.alibaba.p3c:p3c-pmd:1.3.0"//代码审查
}

def createDir = {
	path ->
		File dir = file(path)
		if(!dir.exists()){
			dir.mkdirs()
		}
}
task makeJavaDir(){//调用闭包创建项目目录
	def paths = ['src/main/java', 'src/main/resources', 'src/test/java', 'src/test/resources']
	doFirst{
		paths.forEach(createDir)
	}
}

task makeWebDir(){
	dependsOn 'makeJavaDir'
	def paths = ['WebRoot/WEB-INF/lib', 'WebRoot/WEB-INF/views', 'WebRoot/public']
	doLast{
		paths.forEach(createDir)
	}
}



